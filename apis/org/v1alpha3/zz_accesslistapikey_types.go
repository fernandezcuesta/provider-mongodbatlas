// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha3

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessListApiKeyInitParameters struct {

	// Unique identifier for the Organization API Key for which you want to create a new access list entry.
	APIKeyID *string `json:"apiKeyId,omitempty" tf:"api_key_id,omitempty"`

	// Range of IP addresses in CIDR notation to be added to the access list. Your access list entry can include only one cidrBlock, or one ipAddress.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Single IP address to be added to the access list.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type AccessListApiKeyObservation struct {

	// Unique identifier for the Organization API Key for which you want to create a new access list entry.
	APIKeyID *string `json:"apiKeyId,omitempty" tf:"api_key_id,omitempty"`

	// Range of IP addresses in CIDR notation to be added to the access list. Your access list entry can include only one cidrBlock, or one ipAddress.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Single IP address to be added to the access list.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type AccessListApiKeyParameters struct {

	// Unique identifier for the Organization API Key for which you want to create a new access list entry.
	// +kubebuilder:validation:Optional
	APIKeyID *string `json:"apiKeyId,omitempty" tf:"api_key_id,omitempty"`

	// Range of IP addresses in CIDR notation to be added to the access list. Your access list entry can include only one cidrBlock, or one ipAddress.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Single IP address to be added to the access list.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

// AccessListApiKeySpec defines the desired state of AccessListApiKey
type AccessListApiKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessListApiKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccessListApiKeyInitParameters `json:"initProvider,omitempty"`
}

// AccessListApiKeyStatus defines the observed state of AccessListApiKey.
type AccessListApiKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessListApiKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccessListApiKey is the Schema for the AccessListApiKeys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type AccessListApiKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiKeyId) || (has(self.initProvider) && has(self.initProvider.apiKeyId))",message="spec.forProvider.apiKeyId is a required parameter"
	Spec   AccessListApiKeySpec   `json:"spec"`
	Status AccessListApiKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessListApiKeyList contains a list of AccessListApiKeys
type AccessListApiKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessListApiKey `json:"items"`
}

// Repository type metadata.
var (
	AccessListApiKey_Kind             = "AccessListApiKey"
	AccessListApiKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessListApiKey_Kind}.String()
	AccessListApiKey_KindAPIVersion   = AccessListApiKey_Kind + "." + CRDGroupVersion.String()
	AccessListApiKey_GroupVersionKind = CRDGroupVersion.WithKind(AccessListApiKey_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessListApiKey{}, &AccessListApiKeyList{})
}
